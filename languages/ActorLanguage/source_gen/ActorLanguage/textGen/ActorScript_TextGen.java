package ActorLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.traceable.behavior.UnitConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class ActorScript_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.createUnitInfo();

    int maxAddress = 0;
    for (SNode actor : ListSequence.fromList(SNodeOperations.getNodeDescendants(ctx.getPrimaryInput(), CONCEPTS.CreateActor$Uv, false, new SAbstractConcept[]{}))) {
      if (SPropertyOperations.getInteger(actor, PROPS.address$DqJ_) > maxAddress) {
        maxAddress = SPropertyOperations.getInteger(actor, PROPS.address$DqJ_);
      }
    }

    // includes
    List<String> headers = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(headers).addElement("ROOT-Sim");
    ListSequence.fromList(headers).addElement("ROOT-Sim/topology");

    tgs.append("#include <ROOT-Sim.h>");
    tgs.newLine();
    tgs.append("#include <ROOT-Sim/topology.h>");
    tgs.newLine();
    tgs.append("#include <stdio.h>");
    tgs.newLine();
    tgs.append("#include <string.h>");
    tgs.newLine();
    tgs.append("#include <unistd.h>");
    tgs.newLine();
    tgs.newLine();

    for (SNode type : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.types$lVcp), CONCEPTS.ExternalType$Bi))) {
      if (!(ListSequence.fromList(headers).contains(SPropertyOperations.getString(type, PROPS.header$$WII)))) {
        ListSequence.fromList(headers).addElement(SPropertyOperations.getString(type, PROPS.header$$WII));
        tgs.append("#include <");
        tgs.append(SPropertyOperations.getString(type, PROPS.header$$WII));
        tgs.append(".h>");
        tgs.newLine();
      }
    }

    for (SNode function : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.externalFunctions$bWTb), CONCEPTS.ExternalFunctionPrototype$n3))) {
      if (!(ListSequence.fromList(headers).contains(SPropertyOperations.getString(function, PROPS.header$7lfc)))) {
        ListSequence.fromList(headers).addElement(SPropertyOperations.getString(function, PROPS.header$7lfc));
        tgs.append("#include <");
        tgs.append(SPropertyOperations.getString(function, PROPS.header$7lfc));
        tgs.append(".h>");
        tgs.newLine();
      }
    }

    // define number of LPs
    tgs.append("#ifndef NUM_LPS");
    tgs.newLine();
    tgs.append("#define NUM_LPS ");
    tgs.append(String.valueOf(maxAddress + 1));
    tgs.newLine();
    tgs.append("#endif");
    tgs.newLine();
    tgs.newLine();

    // define number of threads to 0 (max threads available)
    tgs.append("#ifndef NUM_THREADS");
    tgs.newLine();
    tgs.append("#define NUM_THREADS 0");
    tgs.newLine();
    tgs.append("#endif");
    tgs.newLine();
    tgs.newLine();

    for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.configuration$6ery)) {
      tgs.appendNode(item);
    }
    tgs.newLine();

    tgs.appendNode(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.topology$GORc));

    Behaviors.behaviors(SNodeOperations.ofConcept(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.behaviors$VQhG), CONCEPTS.CreateBehavior$iN), ctx);

    // ProcessEvent
    tgs.append("void ProcessEvent(lp_id_t me, simtime_t now, unsigned event_type, const void *msg, __unused unsigned size, void *state)");
    tgs.newLine();
    tgs.append("{");
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();

    tgs.indent();
    tgs.append("switch(me) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode actor : ListSequence.fromList(SNodeOperations.getNodeDescendants(ctx.getPrimaryInput(), CONCEPTS.CreateActor$Uv, false, new SAbstractConcept[]{}))) {
      tgs.indent();
      tgs.append("case ");
      tgs.append(String.valueOf(SPropertyOperations.getInteger(actor, PROPS.address$DqJ_)));
      tgs.append(":");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("/* ");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(actor, LINKS.behavior$Wafv), PROPS.name$MnvL));
      tgs.append(" */");
      tgs.newLine();
      tgs.indent();
      tgs.append("switch(event_type) {");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append("case LP_INIT: {");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      Handler.handlerFunction(SLinkOperations.getTarget(SLinkOperations.getTarget(actor, LINKS.behavior$Wafv), LINKS.initHandler$1yDf), ctx);
      ctx.getBuffer().area().decreaseIndent();
      tgs.indent();
      tgs.append("}");
      tgs.newLine();
      tgs.indent();
      tgs.append("case EVENT: {");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(actor, LINKS.behavior$Wafv), PROPS.name$MnvL));
      tgs.append("(me, now, msg, state);");
      tgs.newLine();
      tgs.indent();
      tgs.append("break;");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
      tgs.indent();
      tgs.append("}");
      tgs.newLine();
      tgs.indent();
      tgs.append("case LP_FINI: {");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      Handler.handlerFunction(SLinkOperations.getTarget(SLinkOperations.getTarget(actor, LINKS.behavior$Wafv), LINKS.cleanupHandler$1ySg), ctx);
      ctx.getBuffer().area().decreaseIndent();
      tgs.indent();
      tgs.append("}");
      tgs.newLine();
      for (final SNode customEvent : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.customEvents$eDRO))) {
        tgs.indent();
        tgs.append("case ");
        tgs.append(SPropertyOperations.getString(customEvent, PROPS.name$MnvL));
        tgs.append(": {");
        tgs.newLine();
        ctx.getBuffer().area().increaseIndent();
        Handler.handlerFunction(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(actor, LINKS.behavior$Wafv), LINKS.customEventsHandlers$Ugrs)).findFirst((it) -> SLinkOperations.getTarget(it, LINKS.event$5Bra) == customEvent), LINKS.function$8k$G), ctx);
        ctx.getBuffer().area().decreaseIndent();
        tgs.indent();
        tgs.append("}");
        tgs.newLine();
      }
      ctx.getBuffer().area().decreaseIndent();
      tgs.indent();
      tgs.append("}");
      tgs.newLine();
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    ctx.getBuffer().area().decreaseIndent();

    tgs.append("}");
    tgs.newLine();


    tgs.append("bool CanEnd(lp_id_t me, const void *snapshot) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("switch(me) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode actor : ListSequence.fromList(SNodeOperations.getNodeDescendants(ctx.getPrimaryInput(), CONCEPTS.CreateActor$Uv, false, new SAbstractConcept[]{}))) {
      tgs.indent();
      tgs.append("case ");
      tgs.append(String.valueOf(SPropertyOperations.getInteger(actor, PROPS.address$DqJ_)));
      tgs.append(": {");
      tgs.newLine();
      ctx.getBuffer().area().increaseIndent();
      tgs.indent();
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(actor, LINKS.stateType$2Mnh), PROPS.name$MnvL));
      tgs.append(" ");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(actor, LINKS.behavior$Wafv), PROPS.name$MnvL));
      tgs.append("_data = (");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(actor, LINKS.stateType$2Mnh), PROPS.name$MnvL));
      tgs.append(" *)snapshot;");
      tgs.newLine();
      tgs.indent();
      tgs.append("return ");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(actor, LINKS.behavior$Wafv), PROPS.name$MnvL));
      tgs.append("_data->can_end;");
      tgs.newLine();
      ctx.getBuffer().area().decreaseIndent();
      tgs.indent();
      tgs.append("}");
      tgs.newLine();
    }
    tgs.indent();
    tgs.append("default:");
    tgs.newLine();
    tgs.indent();
    tgs.append("return true;");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    // configure simulation
    tgs.append("struct simulation_configuration conf = {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append(".n_threads = 1,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".termination_time = 0,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".gvt_period = 1000,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".log_level = LOG_INFO,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".stats_file = \"stats\",");
    tgs.newLine();
    tgs.indent();
    tgs.append(".ckpt_interval = 0,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".core_binding = true,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".serial = false,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".dispatcher = ProcessEvent,");
    tgs.newLine();
    tgs.indent();
    tgs.append(".committed = CanEnd,");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("};");
    tgs.newLine();
    tgs.newLine();

    // main function
    tgs.append("int main(void) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    // todo handle input parameters in a configurable way (defined by the overlying model)
    tgs.indent();
    tgs.append("if (argc != 2) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("printf(\"Usage: %s <n_threads>\", argv[0]);");
    tgs.newLine();
    tgs.indent();
    tgs.append("exit(1);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.indent();
    tgs.append("conf.n_threads = atoi(argv[1]);");
    tgs.newLine();
    tgs.indent();
    tgs.append("InitTopology();");
    tgs.newLine();
    tgs.indent();
    tgs.append("RootsimInit(&conf);");
    tgs.newLine();
    tgs.indent();
    tgs.append("int ret = RootsimRun();");
    tgs.newLine();
    tgs.indent();
    tgs.append("ReleaseTopology(topology);");
    tgs.newLine();
    tgs.indent();
    tgs.append("return ret;");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    if (tgs.needPositions()) {
      tgs.fillUnitInfo(UnitConcept__BehaviorDescriptor.getUnitName_id4pl5GY7LKmR.invoke(SNodeOperations.cast(ctx.getPrimaryInput(), CONCEPTS.UnitConcept$1g)));
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty address$DqJ_ = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23364L, 0x13974e2681512c34L, "address");
    /*package*/ static final SProperty header$$WII = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2e879cff63330806L, 0xbc4afff42e6671bL, "header");
    /*package*/ static final SProperty header$7lfc = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x6065ca884e7a5fe9L, 0x6065ca884e7a6002L, "header");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept CreateActor$Uv = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23364L, "ActorLanguage.structure.CreateActor");
    /*package*/ static final SConcept ExternalType$Bi = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2e879cff63330806L, "ActorLanguage.structure.ExternalType");
    /*package*/ static final SConcept ExternalFunctionPrototype$n3 = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x6065ca884e7a5fe9L, "ActorLanguage.structure.ExternalFunctionPrototype");
    /*package*/ static final SConcept CreateBehavior$iN = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe5743ae753L, "ActorLanguage.structure.CreateBehavior");
    /*package*/ static final SInterfaceConcept UnitConcept$1g = MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L, 0xbfd948636cfe8bc3L, 0x465516cf87c705a4L, "jetbrains.mps.lang.traceable.structure.UnitConcept");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink types$lVcp = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23376L, 0x754f4cb23a308c63L, "types");
    /*package*/ static final SContainmentLink externalFunctions$bWTb = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23376L, 0x61da6c5c302ab136L, "externalFunctions");
    /*package*/ static final SContainmentLink configuration$6ery = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23376L, 0xbc4afff405f7c51L, "configuration");
    /*package*/ static final SContainmentLink topology$GORc = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23376L, 0x262cd812cfe6cc9dL, "topology");
    /*package*/ static final SContainmentLink behaviors$VQhG = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23376L, 0x5d890eb3ebfeaec2L, "behaviors");
    /*package*/ static final SReferenceLink behavior$Wafv = MetaAdapterFactory.getReferenceLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23364L, 0x47ae2b741b264b70L, "behavior");
    /*package*/ static final SContainmentLink initHandler$1yDf = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe5743ae753L, 0x1f52820f4a18a31cL, "initHandler");
    /*package*/ static final SContainmentLink cleanupHandler$1ySg = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe5743ae753L, 0x1f52820f4a18a31dL, "cleanupHandler");
    /*package*/ static final SContainmentLink customEventsHandlers$Ugrs = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe5743ae753L, 0x1f52820f4a64224bL, "customEventsHandlers");
    /*package*/ static final SReferenceLink event$5Bra = MetaAdapterFactory.getReferenceLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x1f52820f4a642252L, 0x1f52820f4a642253L, "event");
    /*package*/ static final SContainmentLink function$8k$G = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x1f52820f4a642252L, 0x1f52820f4a64226bL, "function");
    /*package*/ static final SContainmentLink customEvents$eDRO = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23376L, 0x1f52820f4a642248L, "customEvents");
    /*package*/ static final SReferenceLink stateType$2Mnh = MetaAdapterFactory.getReferenceLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x6065ca884ef595cdL, 0x47ae2b741b264b71L, "stateType");
  }
}
