package ActorLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ChangeFetchPolicy_Constraints extends BaseConstraintsDescriptor {
  public ChangeFetchPolicy_Constraints() {
    super(CONCEPTS.ChangeFetchPolicy$Nx);
  }

  public static class NewPolicy_Property extends BasePropertyConstraintsDescriptor {
    public NewPolicy_Property(ConstraintsDescriptor container) {
      super(PROPS.newPolicy$iNZa, container, false, true, false);
    }
    @Override
    public void setPropertyValue(SNode node, Object propertyValue) {
      staticSetPropertyValue(node, SPropertyOperations.castEnummember(propertyValue));
    }
    private static void staticSetPropertyValue(SNode node, SEnumerationLiteral propertyValue) {
      SPropertyOperations.assignEnum(node, PROPS.newPolicy$iNZa, propertyValue);
      SPropertyOperations.assignEnum(SNodeOperations.getNodeAncestor(node, CONCEPTS.CreateActor$Uv, false, false), PROPS.fetchPolicy$2LTf, propertyValue);
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.newPolicy$iNZa, new NewPolicy_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ChangeFetchPolicy$Nx = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x5ef413f8f61f9c04L, "ActorLanguage.structure.ChangeFetchPolicy");
    /*package*/ static final SConcept CreateActor$Uv = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23364L, "ActorLanguage.structure.CreateActor");
  }

  private static final class PROPS {
    /*package*/ static final SProperty newPolicy$iNZa = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x5ef413f8f61f9c04L, 0x5ef413f8f61f9c05L, "newPolicy");
    /*package*/ static final SProperty fetchPolicy$2LTf = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x6065ca884ef595cdL, 0x47ae2b741b264b6fL, "fetchPolicy");
  }
}
