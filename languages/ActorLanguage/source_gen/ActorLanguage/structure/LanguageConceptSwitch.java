package ActorLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ActorAction = 0;
  public static final int ActorBox = 1;
  public static final int ActorBoxesList = 2;
  public static final int ActorLink = 3;
  public static final int ActorLinksList = 4;
  public static final int ActorReference = 5;
  public static final int ActorReferenceList = 6;
  public static final int ActorScript = 7;
  public static final int ActorsGraph = 8;
  public static final int Become = 9;
  public static final int ChangeFetchPolicy = 10;
  public static final int CreateActor = 11;
  public static final int CreateActorReference = 12;
  public static final int CreateActors = 13;
  public static final int CreateBehavior = 14;
  public static final int CreateEnvelope = 15;
  public static final int CreateMessage = 16;
  public static final int CreatePayload = 17;
  public static final int CustomType = 18;
  public static final int EmptyLine = 19;
  public static final int Envelope = 20;
  public static final int ExternalFunction = 21;
  public static final int ExternalFunctionPrototype = 22;
  public static final int ForEachActorReferenceStatement = 23;
  public static final int GetActorsFromReceptionist = 24;
  public static final int IBehavior = 25;
  public static final int ICreateActor = 26;
  public static final int IExternalFunction = 27;
  public static final int Initializer = 28;
  public static final int InitializerAction = 29;
  public static final int Link = 30;
  public static final int MessageQueue = 31;
  public static final int MessageRef = 32;
  public static final int Payload = 33;
  public static final int RandomActor = 34;
  public static final int Receptionist = 35;
  public static final int ReceptionistPolicy = 36;
  public static final int ReturnActorReference = 37;
  public static final int SelectEnvelope = 38;
  public static final int SelectPayload = 39;
  public static final int SendMessage = 40;
  public static final int SendMessageToActors = 41;
  public static final int StatementConstraint = 42;
  public static final int StringBody = 43;
  public static final int SwitchPolicy = 44;
  public static final int Window = 45;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x10eda99958984cdeL, 0x9416196c5eca1268L);
    builder.put(0x13974e2681512684L, ActorAction);
    builder.put(0x262cd812cfe57937L, ActorBox);
    builder.put(0x6b33cca64056ab07L, ActorBoxesList);
    builder.put(0x262cd812cfe57938L, ActorLink);
    builder.put(0x6b33cca6412e20a5L, ActorLinksList);
    builder.put(0x2e9333277ec5d1L, ActorReference);
    builder.put(0x401c50b1e5ba7cb3L, ActorReferenceList);
    builder.put(0x35a5eccbf2f23376L, ActorScript);
    builder.put(0x262cd812cfe57936L, ActorsGraph);
    builder.put(0x5366e9c2d97392cfL, Become);
    builder.put(0x5ef413f8f61f9c04L, ChangeFetchPolicy);
    builder.put(0x35a5eccbf2f23364L, CreateActor);
    builder.put(0x2e933327617303L, CreateActorReference);
    builder.put(0x5d890eb3ec029424L, CreateActors);
    builder.put(0x2176abe5743ae753L, CreateBehavior);
    builder.put(0x2176abe574366687L, CreateEnvelope);
    builder.put(0x35a5eccbf2f23371L, CreateMessage);
    builder.put(0x2176abe574366688L, CreatePayload);
    builder.put(0x754f4cb23a214a8fL, CustomType);
    builder.put(0x6065ca884ebc5f27L, EmptyLine);
    builder.put(0x13974e268151b855L, Envelope);
    builder.put(0x61da6c5c302aacc3L, ExternalFunction);
    builder.put(0x6065ca884e7a5fe9L, ExternalFunctionPrototype);
    builder.put(0x401c50b1e5dbf567L, ForEachActorReferenceStatement);
    builder.put(0x13974e2681690352L, GetActorsFromReceptionist);
    builder.put(0x6065ca884edf2a23L, IBehavior);
    builder.put(0x6065ca884ef595cdL, ICreateActor);
    builder.put(0x6065ca884e7a2d23L, IExternalFunction);
    builder.put(0xe2178aac28357fL, Initializer);
    builder.put(0xe2178aac288a99L, InitializerAction);
    builder.put(0x8a35ff51116d39aL, Link);
    builder.put(0x6ac9b580f420bed7L, MessageQueue);
    builder.put(0x6ac9b580f420bedcL, MessageRef);
    builder.put(0x13974e2681521590L, Payload);
    builder.put(0x13974e2681d6dd14L, RandomActor);
    builder.put(0x5d890eb3ebfeaec5L, Receptionist);
    builder.put(0x13974e26817cb5d6L, ReceptionistPolicy);
    builder.put(0x2e9333273d647cL, ReturnActorReference);
    builder.put(0x9de89b125bf6283L, SelectEnvelope);
    builder.put(0x4658738496c93a82L, SelectPayload);
    builder.put(0x35a5eccbf2f26df2L, SendMessage);
    builder.put(0x338e7da8a4a78ca9L, SendMessageToActors);
    builder.put(0x61da6c5c2fca56f7L, StatementConstraint);
    builder.put(0x3db738e392e4ce51L, StringBody);
    builder.put(0x13974e2681a795e5L, SwitchPolicy);
    builder.put(0x712ee2200f5e06fcL, Window);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
