package ActorLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import com.mbeddr.mpsutil.grammarcells.runtime.SideTransformationHolderCell;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.core.modules.behavior.IModuleContent__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.mpsutil.grammarcells.runtime.IFlagModelAccess;
import com.mbeddr.mpsutil.grammarcells.runtime.DefaultFlagModelAccess;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import com.mbeddr.mpsutil.grammarcells.runtime.CellActionWithReadAccess;
import com.mbeddr.mpsutil.grammarcells.runtime.GrammarCellsUtil;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import com.mbeddr.core.base.editor.mbeddrBaseStyles_StyleSheet.KWStyleClass;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import com.mbeddr.mpsutil.grammarcells.runtime.menu.GrammarCellsSideTransformTransformationMenuItem;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SEmptyContainmentSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_DeleteSmart;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.SPropertyAccessor;
import com.mbeddr.core.base.editor.mbeddrBaseStyles_StyleSheet.GlobalVariableStyleClass;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfoPartEx;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import java.util.Objects;
import jetbrains.mps.lang.core.behavior.PropertyAttribute__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.update.AttributeKind;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_PropertyValues;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.nodeEditor.cellMenu.CellContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionWrapper;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import jetbrains.mps.nodeEditor.menus.EditorMenuTraceInfoImpl;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import com.mbeddr.core.expressions.behavior.Type__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.mbeddr.mpsutil.grammarcells.runtime.SavedCaretPosition;
import com.mbeddr.mpsutil.grammarcells.runtime.DelegateToParentCellAction;
import com.mbeddr.mpsutil.grammarcells.runtime.StringOrSequenceQuery;
import com.mbeddr.mpsutil.grammarcells.runtime.MultiTextActionItem;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import com.mbeddr.core.base.editor.mbeddrBaseStyles_StyleSheet.SemiStyleClass;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/*package*/ class GlobalVarDecl_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public GlobalVarDecl_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_dchcyn_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createSideTransformationHolderProcessor_0());
    return editorCell;
  }
  private EditorCell createSideTransformationHolderProcessor_0() {
    final EditorCell editorCell = createCollection_1();
    if (editorCell instanceof jetbrains.mps.openapi.editor.cells.EditorCell_Collection) {
      SideTransformationHolderCell.processParentCollection((jetbrains.mps.openapi.editor.cells.EditorCell_Collection) editorCell);
    }
    return editorCell;
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_dchcyn_a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createCustomFactory_1());
    if (nodeCondition_dchcyn_a1a0a()) {
      editorCell.addEditorCell(createCustomFactory_5());
    }
    if (nodeCondition_dchcyn_a2a0a()) {
      editorCell.addEditorCell(createCustomFactory_9());
    }
    editorCell.addEditorCell(createCustomFactory_11());
    editorCell.addEditorCell(createSideTransformationHolderProcessor_1());
    return editorCell;
  }
  private boolean nodeCondition_dchcyn_a1a0a() {
    return !(SNodeOperations.isInstanceOf(IModuleContent__BehaviorDescriptor.owningModule_id19a6$uAAaU1.invoke(myNode), CONCEPTS.ExternalModule$xK));
  }
  private boolean nodeCondition_dchcyn_a2a0a() {
    return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(myNode, LINKS.prefixes$hyki)).isNotEmpty();
  }
  private EditorCell createCustomFactory_0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createAlternation_0();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> cell).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_1() {
    return createCustomFactory_0(getEditorContext(), myNode);
  }
  private EditorCell createAlternation_0() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_dchcyn_a0a0a0();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createCustomFactory_3();
    } else {
      editorCell = createSideTransformationSectionCell_0();
    }
    return editorCell;
  }
  private boolean nodeCondition_dchcyn_a0a0a0() {
    IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.extern$WI8W);
    if (!(access.read(myNode))) {
      return false;
    }


    return true;
  }
  private EditorCell createCustomFactory_2(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createConstant_0();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> {
      cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
        public void execute(EditorContext editorContext) {
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.extern$WI8W);
          access.write(node, false);
          GrammarCellsUtil.selectPrevNextOnSameLine(editorContext, true);
        }
      });
      cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
        public void execute(EditorContext editorContext) {
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.extern$WI8W);
          access.write(node, false);
          GrammarCellsUtil.selectPrevNextOnSameLine(editorContext, false);
        }
      });
      return cell;
    }).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_3() {
    return createCustomFactory_2(getEditorContext(), myNode);
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "extern");
    editorCell.setCellId("flag_extern");
    Style style = new StyleImpl();
    new KWStyleClass(this).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createSideTransformationSectionCell_0() {
    SideTransformationHolderCell editorCell = new SideTransformationHolderCell(getEditorContext(), myNode, null, "flag 'extern'") {
      @Override
      public List<MenuPart<TransformationMenuItem, TransformationMenuContext>> createMenuParts() {
        return ListSequence.fromListAndArray(new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>(), new GenericMenuPart_a0a0a0a0());
      }
    };
    editorCell.setCellId("SideTransformationSectionCell_dchcyn_a0a0a0");
    return editorCell;
  }
  private class GenericMenuPart_a0a0a0a0 implements MenuPart<TransformationMenuItem, TransformationMenuContext> {

    @NotNull
    @Override
    public List<TransformationMenuItem> createItems(final TransformationMenuContext ctx) {
      List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
      final boolean isApplicable = new Object() {
        public boolean query() {
          final SNode node = ctx.getNode();
          SAbstractConcept subconcept = SNodeOperations.getConcept(node);
          EditorContext editorContext = ctx.getEditorContext();
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.extern$WI8W);
          boolean applicable = !(access.read(node));
          applicable &= !(GrammarCellsUtil.isProperty(ctx.getEditorContext().getSelectedCell())) || ctx.getMenuLocation() != MenuLocations.RIGHT_SIDE_TRANSFORM;
          return applicable;
        }
      }.query();
      if (isApplicable) {
        GrammarCellsSideTransformTransformationMenuItem item = new GrammarCellsSideTransformTransformationMenuItem(ctx) {

          public String getMatchingText(String pattern) {
            return "extern";
          }

          @Override
          public void execute(@NotNull String pattern) {
            doSubstitute(pattern);
          }
          public SNode doSubstitute(String pattern) {
            SNode node = SNodeOperations.cast(ctx.getNode(), CONCEPTS.GlobalVarDecl$3_);
            IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.extern$WI8W);
            access.write(node, true);
            SelectionUtil.selectLabelCellAnSetCaret(ctx.getEditorContext(), node, "flag_extern", -1);
            return null;
          }
          public SAbstractConcept getOutputConcept() {
            return CONCEPTS.GlobalVarDecl$3_;
          }
        };
        ListSequence.fromList(result).addElement(item);
      }
      return result;
    }
  }
  private EditorCell createCustomFactory_4(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createAlternation_1();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> cell).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_5() {
    return createCustomFactory_4(getEditorContext(), myNode);
  }
  private EditorCell createAlternation_1() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_dchcyn_a0b0a0();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createCustomFactory_7();
    } else {
      editorCell = createSideTransformationSectionCell_1();
    }
    return editorCell;
  }
  private boolean nodeCondition_dchcyn_a0b0a0() {
    IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.exported$V4am);
    if (!(access.read(myNode))) {
      return false;
    }


    return true;
  }
  private EditorCell createCustomFactory_6(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createConstant_1();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> {
      cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
        public void execute(EditorContext editorContext) {
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.exported$V4am);
          access.write(node, false);
          GrammarCellsUtil.selectPrevNextOnSameLine(editorContext, true);
        }
      });
      cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
        public void execute(EditorContext editorContext) {
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.exported$V4am);
          access.write(node, false);
          GrammarCellsUtil.selectPrevNextOnSameLine(editorContext, false);
        }
      });
      return cell;
    }).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_7() {
    return createCustomFactory_6(getEditorContext(), myNode);
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "exported");
    editorCell.setCellId("flag_exported");
    Style style = new StyleImpl();
    new KWStyleClass(this).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createSideTransformationSectionCell_1() {
    SideTransformationHolderCell editorCell = new SideTransformationHolderCell(getEditorContext(), myNode, null, "flag 'exported'") {
      @Override
      public List<MenuPart<TransformationMenuItem, TransformationMenuContext>> createMenuParts() {
        return ListSequence.fromListAndArray(new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>(), new GenericMenuPart_a0a0b0a0());
      }
    };
    editorCell.setCellId("SideTransformationSectionCell_dchcyn_a0b0a0");
    return editorCell;
  }
  private class GenericMenuPart_a0a0b0a0 implements MenuPart<TransformationMenuItem, TransformationMenuContext> {

    @NotNull
    @Override
    public List<TransformationMenuItem> createItems(final TransformationMenuContext ctx) {
      List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
      final boolean isApplicable = new Object() {
        public boolean query() {
          final SNode node = ctx.getNode();
          SAbstractConcept subconcept = SNodeOperations.getConcept(node);
          EditorContext editorContext = ctx.getEditorContext();
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.exported$V4am);
          boolean applicable = !(access.read(node));
          applicable &= !(GrammarCellsUtil.isProperty(ctx.getEditorContext().getSelectedCell())) || ctx.getMenuLocation() != MenuLocations.RIGHT_SIDE_TRANSFORM;
          return applicable;
        }
      }.query();
      if (isApplicable) {
        GrammarCellsSideTransformTransformationMenuItem item = new GrammarCellsSideTransformTransformationMenuItem(ctx) {

          public String getMatchingText(String pattern) {
            return "exported";
          }

          @Override
          public void execute(@NotNull String pattern) {
            doSubstitute(pattern);
          }
          public SNode doSubstitute(String pattern) {
            SNode node = SNodeOperations.cast(ctx.getNode(), CONCEPTS.GlobalVarDecl$3_);
            IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.exported$V4am);
            access.write(node, true);
            SelectionUtil.selectLabelCellAnSetCaret(ctx.getEditorContext(), node, "flag_exported", -1);
            return null;
          }
          public SAbstractConcept getOutputConcept() {
            return CONCEPTS.GlobalVarDecl$3_;
          }
        };
        ListSequence.fromList(result).addElement(item);
      }
      return result;
    }
  }
  private EditorCell createCustomFactory_8(final EditorContext editorContext, final SNode node) {

    if (!(new Object() {
      public boolean showWrapped() {
        return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(myNode, LINKS.prefixes$hyki)).isNotEmpty();
      }
    }.showWrapped())) {
      return EditorCell_Collection.createVertical(editorContext, node);
    }

    final EditorCell cell = createCollection_2();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> cell).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_9() {
    return createCustomFactory_8(getEditorContext(), myNode);
  }
  private EditorCell createCollection_2() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_dchcyn_a2a0a");
    editorCell.addEditorCell(createRefNodeList_0());
    return editorCell;
  }
  private EditorCell createRefNodeList_0() {
    AbstractCellListHandler handler = new prefixesListHandler_dchcyn_a0c0a0(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Indent(), false);
    editorCell.setCellId("refNodeList_prefixes");
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class prefixesListHandler_dchcyn_a0c0a0 extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public prefixesListHandler_dchcyn_a0c0a0(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.prefixes$hyki;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.Prefix$uy;
    }

    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(prefixesListHandler_dchcyn_a0c0a0.this.getNode(), LINKS.prefixes$hyki));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
  }
  private EditorCell createCustomFactory_10(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createAlternation_2();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> cell).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_11() {
    return createCustomFactory_10(getEditorContext(), myNode);
  }
  private EditorCell createAlternation_2() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_dchcyn_a0d0a0();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createCustomFactory_13();
    } else {
      editorCell = createSideTransformationSectionCell_2();
    }
    return editorCell;
  }
  private boolean nodeCondition_dchcyn_a0d0a0() {
    IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.storeInRegister$k44L);
    if (!(access.read(myNode))) {
      return false;
    }


    return true;
  }
  private EditorCell createCustomFactory_12(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createConstant_2();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> {
      cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
        public void execute(EditorContext editorContext) {
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.storeInRegister$k44L);
          access.write(node, false);
          GrammarCellsUtil.selectPrevNextOnSameLine(editorContext, true);
        }
      });
      cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
        public void execute(EditorContext editorContext) {
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.storeInRegister$k44L);
          access.write(node, false);
          GrammarCellsUtil.selectPrevNextOnSameLine(editorContext, false);
        }
      });
      return cell;
    }).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_13() {
    return createCustomFactory_12(getEditorContext(), myNode);
  }
  private EditorCell createConstant_2() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "register");
    editorCell.setCellId("flag_storeInRegister");
    Style style = new StyleImpl();
    new KWStyleClass(this).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createSideTransformationSectionCell_2() {
    SideTransformationHolderCell editorCell = new SideTransformationHolderCell(getEditorContext(), myNode, null, "flag 'register'") {
      @Override
      public List<MenuPart<TransformationMenuItem, TransformationMenuContext>> createMenuParts() {
        return ListSequence.fromListAndArray(new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>(), new GenericMenuPart_a0a0d0a0());
      }
    };
    editorCell.setCellId("SideTransformationSectionCell_dchcyn_a0d0a0");
    return editorCell;
  }
  private class GenericMenuPart_a0a0d0a0 implements MenuPart<TransformationMenuItem, TransformationMenuContext> {

    @NotNull
    @Override
    public List<TransformationMenuItem> createItems(final TransformationMenuContext ctx) {
      List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
      final boolean isApplicable = new Object() {
        public boolean query() {
          final SNode node = ctx.getNode();
          SAbstractConcept subconcept = SNodeOperations.getConcept(node);
          EditorContext editorContext = ctx.getEditorContext();
          IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.storeInRegister$k44L);
          boolean applicable = !(access.read(node));
          applicable &= !(GrammarCellsUtil.isProperty(ctx.getEditorContext().getSelectedCell())) || ctx.getMenuLocation() != MenuLocations.RIGHT_SIDE_TRANSFORM;
          return applicable;
        }
      }.query();
      if (isApplicable) {
        GrammarCellsSideTransformTransformationMenuItem item = new GrammarCellsSideTransformTransformationMenuItem(ctx) {

          public String getMatchingText(String pattern) {
            return "register";
          }

          @Override
          public void execute(@NotNull String pattern) {
            doSubstitute(pattern);
          }
          public SNode doSubstitute(String pattern) {
            SNode node = SNodeOperations.cast(ctx.getNode(), CONCEPTS.GlobalVarDecl$3_);
            IFlagModelAccess access = new DefaultFlagModelAccess(PROPS.storeInRegister$k44L);
            access.write(node, true);
            SelectionUtil.selectLabelCellAnSetCaret(ctx.getEditorContext(), node, "flag_storeInRegister", -1);
            return null;
          }
          public SAbstractConcept getOutputConcept() {
            return CONCEPTS.GlobalVarDecl$3_;
          }
        };
        ListSequence.fromList(result).addElement(item);
      }
      return result;
    }
  }
  private EditorCell createSideTransformationHolderProcessor_1() {
    final EditorCell editorCell = createCollection_3();
    if (editorCell instanceof jetbrains.mps.openapi.editor.cells.EditorCell_Collection) {
      SideTransformationHolderCell.processParentCollection((jetbrains.mps.openapi.editor.cells.EditorCell_Collection) editorCell);
    }
    return editorCell;
  }
  private EditorCell createCollection_3() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_dchcyn_a4a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createRefNode_0());
    editorCell.addEditorCell(createProperty_0());
    editorCell.addEditorCell(createAlternation_3());
    editorCell.addEditorCell(createConstant_4());
    return editorCell;
  }
  private EditorCell createRefNode_0() {
    SingleRoleCellProvider provider = new typeSingleRoleHandler_dchcyn_a0e0a0(myNode, LINKS.type$sXU3, getEditorContext());
    return provider.createCell();
  }
  private static class typeSingleRoleHandler_dchcyn_a0e0a0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public typeSingleRoleHandler_dchcyn_a0e0a0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.type$sXU3, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.type$sXU3, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.type$sXU3);
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.type$sXU3));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_type");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no type>";
    }
  }
  private EditorCell createProperty_0() {
    getCellFactory().pushCellContext();
    try {
      final SProperty property = PROPS.name$MnvL;
      getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
      EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
      editorCell.setDefaultText("<no name>");
      editorCell.setCellId("property_name");
      Style style = new StyleImpl();
      new GlobalVariableStyleClass(this).apply(style, editorCell);
      editorCell.getStyle().putAll(style);
      editorCell.setSubstituteInfo(new CompositeSubstituteInfo(getEditorContext(), new PropertyCellContext(myNode, property), new SubstituteInfoPartExt[]{new GlobalVarDecl_name_cellMenu_dchcyn_a0b0e0a0(), new SChildSubstituteInfoPartEx(editorCell)}));
      setCellContext(editorCell);
      Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
      Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where((it) -> Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property));
      if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
        EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
        return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
      } else
      return editorCell;
    } finally {
      getCellFactory().popCellContext();
    }
  }
  public static class GlobalVarDecl_name_cellMenu_dchcyn_a0b0e0a0 extends AbstractCellMenuPart_PropertyValues {
    public GlobalVarDecl_name_cellMenu_dchcyn_a0b0e0a0() {
    }
    @Override
    public List<SubstituteAction> createActions(CellContext cellContext, EditorContext editorContext) {
      return ListSequence.fromList(super.createActions(cellContext, editorContext)).select((action) -> {
        return (SubstituteAction) new NodeSubstituteActionWrapper(action) {
          @Override
          public EditorMenuTraceInfo getEditorMenuTraceInfo() {
            EditorMenuTraceInfoImpl result = new EditorMenuTraceInfoImpl();
            result.setDescriptor(new EditorMenuDescriptorBase("property postfix values", new SNodePointer("r:69381955-c8b5-4c14-b1e0-ddad66dcca70(ActorLanguage.editor)", "1850134002004915652")));
            return result;
          }
        };
      }).toList();
    }

    protected List<String> getPropertyValues(SNode node, EditorContext editorContext) {
      return (List<String>) Type__BehaviorDescriptor.getSuggestedVarNames_id1AGZLa8nOoa.invoke(SLinkOperations.getTarget(node, LINKS.type$sXU3));
    }
  }
  private EditorCell createAlternation_3() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_dchcyn_a2a4a0a();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createCustomFactory_15();
    } else {
      editorCell = createSideTransformationSectionCell_3();
    }
    return editorCell;
  }
  private boolean nodeCondition_dchcyn_a2a4a0a() {
    return Sequence.fromIterable(AttributeOperations.getChildNodesAndAttributes(myNode, LINKS.init$BXpk)).isNotEmpty();
  }
  private EditorCell createCustomFactory_14(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createCustomFactory_17();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> {
      cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
        public void execute(EditorContext editorContext) {
          SavedCaretPosition caretPosition = new SavedCaretPosition(editorContext);
          caretPosition.save();
          SNodeOperations.deleteNode(SLinkOperations.getTarget(node, LINKS.init$BXpk));
          editorContext.flushEvents();
          caretPosition.restore(true);
        }
      });
      cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
        public void execute(EditorContext editorContext) {
          SavedCaretPosition caretPosition = new SavedCaretPosition(editorContext);
          caretPosition.save();
          SNodeOperations.deleteNode(SLinkOperations.getTarget(node, LINKS.init$BXpk));
          editorContext.flushEvents();
          caretPosition.restore(false);
        }
      });
      return cell;
    }).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_15() {
    return createCustomFactory_14(getEditorContext(), myNode);
  }
  private EditorCell createCustomFactory_16(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createCollection_4();
    EditorCell editorCell = ((_FunctionTypes._return_P0_E0<EditorCell>) () -> {
      final SNode childNode = SLinkOperations.getTarget(myNode, LINKS.init$BXpk);
      new Object() {
        public void removeDeleteAction(EditorCell descendantCell) {
          if (descendantCell.getSNode() == childNode) {
            descendantCell.setAction(CellActionType.DELETE, new DelegateToParentCellAction(descendantCell, CellActionType.DELETE));
            descendantCell.setAction(CellActionType.BACKSPACE, new DelegateToParentCellAction(descendantCell, CellActionType.BACKSPACE));
          } else {
            if (descendantCell instanceof jetbrains.mps.openapi.editor.cells.EditorCell_Collection) {
              for (EditorCell childCell : Sequence.fromIterable(((jetbrains.mps.openapi.editor.cells.EditorCell_Collection) descendantCell))) {
                removeDeleteAction(childCell);
              }
            }
          }
        }
      }.removeDeleteAction(cell);
      return cell;
    }).invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_17() {
    return createCustomFactory_16(getEditorContext(), myNode);
  }
  private EditorCell createCollection_4() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_dchcyn_a0a2a4a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_3());
    editorCell.addEditorCell(createRefNode_1());
    return editorCell;
  }
  private EditorCell createConstant_3() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "=");
    editorCell.setCellId("Constant_dchcyn_a0a0c0e0a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_1() {
    SingleRoleCellProvider provider = new initSingleRoleHandler_dchcyn_b0a0c0e0a0(myNode, LINKS.init$BXpk, getEditorContext());
    return provider.createCell();
  }
  private static class initSingleRoleHandler_dchcyn_b0a0c0e0a0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public initSingleRoleHandler_dchcyn_b0a0c0e0a0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), LINKS.init$BXpk, child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), LINKS.init$BXpk, child));
      installCellInfo(child, editorCell, false);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell, boolean isEmpty) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo((isEmpty ? new SEmptyContainmentSubstituteInfo(editorCell) : new SChildSubstituteInfo(editorCell)));
      }
      if (editorCell.getSRole() == null) {
        editorCell.setSRole(LINKS.init$BXpk);
      }
      Style style = new StyleImpl();
      style.set(StyleAttributes.AUTO_DELETABLE, false);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), LINKS.init$BXpk));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_init");
        installCellInfo(null, editorCell, true);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no init>";
    }
  }
  private EditorCell createSideTransformationSectionCell_3() {
    SideTransformationHolderCell editorCell = new SideTransformationHolderCell(getEditorContext(), myNode, null, "grammar.optional for GlobalVarDecl.init") {
      @Override
      public List<MenuPart<TransformationMenuItem, TransformationMenuContext>> createMenuParts() {
        return ListSequence.fromListAndArray(new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>(), new GenericMenuPart_a0a2a4a0a());
      }
    };
    editorCell.setCellId("SideTransformationSectionCell_dchcyn_a2a4a0a");
    return editorCell;
  }
  private class GenericMenuPart_a0a2a4a0a implements MenuPart<TransformationMenuItem, TransformationMenuContext> {

    @NotNull
    @Override
    public List<TransformationMenuItem> createItems(final TransformationMenuContext ctx) {
      List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
      final SNode sourceNode = ctx.getNode();
      EditorContext editorContext = ctx.getEditorContext();
      final Iterable<String> matchingTexts = new StringOrSequenceQuery() {
        public Object queryStringOrSequence() {
          return Sequence.<String>singleton("=");
        }
      }.query();

      if (Sequence.fromIterable(matchingTexts).isNotEmpty()) {
        ListSequence.fromList(result).addElement(new MultiTextActionItem(matchingTexts, ctx) {
          @Override
          public void execute(@NotNull String pattern) {
            final SNode sourceNode = ctx.getNode();
            EditorContext editorContext = ctx.getEditorContext();
            SNode newNode = SNodeFactoryOperations.setNewChild(SNodeOperations.cast(sourceNode, CONCEPTS.GlobalVarDecl$3_), LINKS.init$BXpk, null);
          }
          @Override
          public SAbstractConcept getOutputConcept() {
            return CONCEPTS.GlobalVarDecl$3_;
          }

          public String getShortDescriptionText(@NotNull String pattern) {
            // if no description was set on the optionalCell, the description shall be blank
            return "";
          }
        });
      }
      return result;
    }
  }
  private EditorCell createConstant_4() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ";");
    editorCell.setCellId("Constant_dchcyn_d0e0a0");
    Style style = new StyleImpl();
    new SemiStyleClass(this).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ExternalModule$xK = MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x54e261614fd1abc1L, "com.mbeddr.core.modules.structure.ExternalModule");
    /*package*/ static final SConcept GlobalVarDecl$3_ = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0xbc4afff405f7c4bL, "ActorLanguage.structure.GlobalVarDecl");
    /*package*/ static final SConcept Prefix$uy = MetaAdapterFactory.getConcept(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x866dc95fc7a033fL, "com.mbeddr.core.statements.structure.Prefix");
    /*package*/ static final SConcept PropertyAttribute$Gb = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink prefixes$hyki = MetaAdapterFactory.getContainmentLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x866dc95fc7a033eL, 0x866dc95fc7a0341L, "prefixes");
    /*package*/ static final SContainmentLink type$sXU3 = MetaAdapterFactory.getContainmentLink(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x46a2a92ac61b183L, 0x46a2a92ac61b184L, "type");
    /*package*/ static final SContainmentLink init$BXpk = MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x5bbe8a6d23a1b6ceL, 0x2675825a6a4d4c89L, "init");
  }

  private static final class PROPS {
    /*package*/ static final SProperty extern$WI8W = MetaAdapterFactory.getProperty(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x5d18402e8bd5672eL, 0x5d18402e8bd56731L, "extern");
    /*package*/ static final SProperty exported$V4am = MetaAdapterFactory.getProperty(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b934fL, 0x124a1a47a69807f0L, "exported");
    /*package*/ static final SProperty storeInRegister$k44L = MetaAdapterFactory.getProperty(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x509503be9ecc5d25L, 0x509503be9ecc5d27L, "storeInRegister");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
